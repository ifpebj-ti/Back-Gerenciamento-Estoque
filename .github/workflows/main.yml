name: Deploy Application
on:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Run Checkstyle Lint
      run: |
        cd estoque
        mvn checkstyle:checkstyle
      continue-on-error: false

    - name: Upload Checkstyle Report
      uses: actions/upload-artifact@v2
      with:
        name: checkstyle-report
        path: estoque/target/site/checkstyle.html    

    - name: build
      run: |
          cd estoque
          mvn clean package -X
  
    - name: Login Docker
      run: docker login -u brazf -p ${{secrets.DOCKERHUB_TOKEN}}
    - name: Build docker image
      run: docker build -t brazf/estoque .
    - name: Push image docker
      run: docker push brazf/estoque
    - name: Save JaCoCo Report
      if: success()
      run: |
        mv estoque/target/site/jacoco/jacoco.csv jacoco.csv
      continue-on-error: false
    - name: Upload JaCoCo Report
      uses: actions/upload-artifact@v2
      with:
        name: jacoco-report
        path: jacoco.csv

  generate-badge:
    name: Generate Badge
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Download JaCoCo Report
      uses: actions/download-artifact@v2
      with:
        name: jacoco-report
  
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Create Badge Directory
      run: mkdir -p .github/badges
  
    - name: Generate Coverage Badge
      uses: cicirello/jacoco-badge-generator@v2
      with:
        jacoco-csv-file: jacoco.csv
        badges-directory: .github/badges
        coverage-badge-filename: coverage-badge.svg
        generate-coverage-badge: true

    - name: Remove Old Badge
      run: |
        sed -i.bak '/!\[Cobertura de Testes\](.github\/badges\/coverage-badge\.svg)/d' README.md

    - name: Commit Removal of Old Badge
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "Removendo badge antigo de cobertura"
        file_pattern: "README.md"

    - name: Add New Badge to README
      run: |
        BADGE_MARKDOWN="![Cobertura de Testes](.github/badges/coverage-badge.svg)"
        echo -e "$BADGE_MARKDOWN\n\n$(cat README.md)" > README.md

    - name: Commit New Badge
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "Adicionando novo badge de cobertura"
        file_pattern: ".github/badges/coverage-badge.svg README.md"

    - name: Upload Coverage Badge
      uses: actions/upload-artifact@v2
      with:
        name: coverage-badge
        path: .github/badges/coverage-badge.svg
        
  deploy:
    needs: generate-badge
    runs-on: self-hosted
    steps:
    - name: Call Portainer Webhook
      run: |
        curl -X POST "${{ secrets.WEBHOOK_BACK_SECRET }}" || echo "Webhook triggered"
    
    - name: Remove old Docker images of backend
      run: |
        docker images brazf/estoque --format "{{.ID}}" | tail -n +2 | xargs -r docker rmi
